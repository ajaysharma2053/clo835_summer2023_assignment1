name: Deploy Flask App and MySQL to ECR

on:
  push:
    branches: [ master ]

jobs:
  
  build:
    name: Build and Deploy Images
    runs-on: ubuntu-latest

    steps:

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Set ECR Repository Name
      run: echo "ECR_REPOSITORY=flask-mysql-ecr" >> $GITHUB_ENV

    - name: Build, Tag, and Push MySQL Database Image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG_DB: mysql-latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_DB -f Dockerfile_mysql .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_DB

    - name: Build, Test, Tag, and Push Flask App Image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG_APP: app-latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_APP -f Dockerfile .

        # Create a custom Docker network
        docker network create flask-network

        # Start the database container in the custom network
        docker run -d --name mysql-db --network flask-network \
          -e MYSQL_ROOT_PASSWORD=password \
          -e MYSQL_DATABASE=employees \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_DB
        
        sleep 15  # Wait for MySQL to initialize

        # Start the Flask app container in the custom network
        docker run -d -p 8080:8080 --name flask-app --network flask-network \
          -e DBHOST=mysql-db \
          -e DBUSER=root \
          -e DBPWD=password \
          -e DATABASE=employees \
          -e DBPORT=3306 \
          $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_APP

        sleep 10  # Wait for the Flask app to start

        # Test if Flask app is running correctly
        curl -vvv http://localhost:8080 || (echo "Flask App failed to start!" && exit 1)

        # Cleanup after test
        docker stop flask-app mysql-db
        docker rm flask-app mysql-db
        docker network rm flask-network

        # Push Flask App Image
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_APP
